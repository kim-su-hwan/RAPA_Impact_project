#include <iostream>
int number = 10, temp_S, temp_B, pivot;
int arr[10] = {1, 11, 40, 2845, 323, 193, 46, 322, 4674, 557};
const int arrSize = (int)(sizeof(arr)/sizeof(arr[0]));

void QuickSort(int start, int end)
{
	if(start >= end) return;
	pivot = start;
	int i = start + 1, j = end;
//비교 값보다 피봇 값이 더 클 때까지 반복
//뭐를 반복하냐...하면
//i부터 end까지 pivot보다 큰 값을 탐색 (a라고 둔다)
//end부터 i까지 pivot보다 작은 값을 탐색 (b라고 둔다)
//둘을 비교해서 arr[a]가 arr[b]보다 큰 경우. 둘의 값을 swap한다.
//만약, arr[a]가 arr[b]보다 작을 경우, arr[a]를 pivot으로 변경해서 다시 수행한다.
//만약, a의 값이 pivot 값보다 큰 경우, 함수의 실행을 종료한다.
	while(i <= j)	
	{
		while(i <= end && arr[i] <= arr[pivot]) { i++; }
		while(j > start && arr[j] >= arr[pivot]) { j--; }
		
		if(i <= j)
		{
			temp_S = arr[i];
			arr[i] = arr[j];
			arr[j] = temp_S;
		} else {
			temp_S = arr[pivot];
			arr[pivot] = arr[j];
			arr[j] = temp_S;
		}
	}
	QuickSort(start, j - 1);
	QuickSort(j + 1, end);
}

void BubbleSort()
{
	int temp;
	for(int i = 0; i < arrSize; i++ )
	{
		for(int j = 0; j < arrSize - (i + 1); j++ )
		{
			if(arr[j] > arr[j + 1])
			{
				temp_B = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp_B;
			}
		}
  }
}

//삽입 정렬은 
void InsertionSort()
{
  //으아아아아아악으아아아아아아악으아아아아아아아아악
}

void PrintArray()
{
  for(int i = 0; i < arrSize; i++)
  {
    printf("%d\n", arr[i]);
  }
}

int main()
{
 	//QuickSort(0, arrSize - 1);
  //BubbleSort();
  PrintArray();

  return 0;
}
